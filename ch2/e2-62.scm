(define (adjoin-set x set)
    (cond ((null? set) (list x))
        ((< x (car set)) (cons x set))
        ((equal? x (car set)) set)
        ((> x (car set)) (cons (car set) (adjoin-set x (cdr set))))
    )
)

(define (union-set set1 set2)
    (cond ((null? set1) set2)
        ((null? set2) set1)
        ((equal? (car set1) (car set2)) (cons (car set1) (union-set (cdr set1) (cdr set2))))
        ((< (car set1) (car set2)) (cons (car set1) (union-set (cdr set1) set2)))
        ((> (car set1) (car set2)) (cons (car set2) (union-set set1 (cdr set2))))
    )
)

(union-set '(5 6 11) '(2 3 10))
