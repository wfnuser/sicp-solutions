(define (multiplicand p) (caddr p))
(define (multiplier p) (cadr p))
(define (product? x) (and (pair? x) (eq? (car x) '*)))
(define (augend s) (caddr s))
(define (addend s) (cadr s))
(define (sum? x) (and (pair? x) (eq? (car x) '+)))
(define (make-product m1 m2) (list '* m1 m2))
(define (make-sum a1 a2) (list '+ a1 a2))
(define (same-variable? v1 v2)
    (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (variable? x) (symbol? x))

(define (exponentiation? x)
    (and (pair? x) (eq? (car x) '**))
)

(define (make-exponentiation a1 a2)
    (cond ((= a2 1) a1)
        ((= a2 0) 1)
        (else (list '** a1 a2))
    )
)

(define (base expression)
    (cadr expression)
)

(define (exponent expression)
    (caddr expression)
)

(define (deriv exp var) 
    (cond ((number? exp) 0)
        ((variable? exp) 
            (if (same-variable? exp var) 1 0)) 
        ((sum? exp) 
            (make-sum (deriv (addend exp) var) (deriv (augend exp) var)))
        ((product? exp)
            (make-sum 
                (make-product (multiplier exp) (deriv (multiplicand exp) var))
                (make-product (deriv (multiplier exp) var) (multiplicand exp))))
        ((exponentiation? exp)
            (make-product 
                (exponent exp) (make-exponentiation var (- (exponent exp) 1))))
        (else (error "unknown expression type: DERIV" exp))))

(deriv '(* 3(** x 2)) 'x)